// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_pan_and_zoom/test/core/domain/presentation/viewer_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i8;

import 'package:flutter/scheduler.dart' as _i2;
import 'package:flutter_pan_and_zoom/core/domain/entities/graph.dart' as _i4;
import 'package:flutter_pan_and_zoom/core/domain/entities/node.dart' as _i3;
import 'package:flutter_pan_and_zoom/core/presentation/base_presentation.dart'
    as _i7;
import 'package:flutter_pan_and_zoom/core/presentation/dragging_procedure.dart'
    as _i6;
import 'package:flutter_pan_and_zoom/core/viewer_state.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTicker_0 extends _i1.SmartFake implements _i2.Ticker {
  _FakeTicker_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

class _FakeNode_1 extends _i1.SmartFake implements _i3.Node {
  _FakeNode_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGraph_2 extends _i1.SmartFake implements _i4.Graph {
  _FakeGraph_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeViewerState_3 extends _i1.SmartFake implements _i5.ViewerState {
  _FakeViewerState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DraggingProcedure].
///
/// See the documentation for Mockito's code generation for more information.
class MockDraggingProcedure extends _i1.Mock implements _i6.DraggingProcedure {
  MockDraggingProcedure() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Function get onTick => (super.noSuchMethod(
        Invocation.getter(#onTick),
        returnValue: () {},
      ) as Function);
  @override
  set onTick(Function? _onTick) => super.noSuchMethod(
        Invocation.setter(
          #onTick,
          _onTick,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Ticker get ticker => (super.noSuchMethod(
        Invocation.getter(#ticker),
        returnValue: _FakeTicker_0(
          this,
          Invocation.getter(#ticker),
        ),
      ) as _i2.Ticker);
  @override
  set ticker(_i2.Ticker? _ticker) => super.noSuchMethod(
        Invocation.setter(
          #ticker,
          _ticker,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Node get node => (super.noSuchMethod(
        Invocation.getter(#node),
        returnValue: _FakeNode_1(
          this,
          Invocation.getter(#node),
        ),
      ) as _i3.Node);
  @override
  set node(_i3.Node? _node) => super.noSuchMethod(
        Invocation.setter(
          #node,
          _node,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Graph get graph => (super.noSuchMethod(
        Invocation.getter(#graph),
        returnValue: _FakeGraph_2(
          this,
          Invocation.getter(#graph),
        ),
      ) as _i4.Graph);
  @override
  _i5.ViewerState get viewerState => (super.noSuchMethod(
        Invocation.getter(#viewerState),
        returnValue: _FakeViewerState_3(
          this,
          Invocation.getter(#viewerState),
        ),
      ) as _i5.ViewerState);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void start(
    _i7.BasePresentation? presentation,
    _i3.Node? node,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #start,
          [
            presentation,
            node,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
