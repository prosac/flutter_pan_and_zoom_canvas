// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_pan_and_zoom/test/core/domain/use_cases/connect_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i9;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_pan_and_zoom/core/domain/entities/node.dart' as _i6;
import 'package:flutter_pan_and_zoom/core/domain/errors/failure.dart' as _i5;
import 'package:flutter_pan_and_zoom/core/domain/repositories/graph_components_repository.dart'
    as _i3;
import 'package:flutter_pan_and_zoom/core/domain/values/edge.dart' as _i7;
import 'package:flutter_pan_and_zoom/core/interaction_state.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GraphComponentsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphComponentsRepository extends _i1.Mock
    implements _i3.GraphComponentsRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Node>>> nodes() =>
      (super.noSuchMethod(
        Invocation.method(
          #nodes,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Node>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Node>>(
          this,
          Invocation.method(
            #nodes,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Node>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Node>>(
          this,
          Invocation.method(
            #nodes,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Node>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Node>> addNode(_i6.Node? node) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNode,
          [node],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Node>>.value(
            _FakeEither_0<_i5.Failure, _i6.Node>(
          this,
          Invocation.method(
            #addNode,
            [node],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Node>>.value(
                _FakeEither_0<_i5.Failure, _i6.Node>(
          this,
          Invocation.method(
            #addNode,
            [node],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Node>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.Edge>>> edges() =>
      (super.noSuchMethod(
        Invocation.method(
          #edges,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i7.Edge>>>.value(
            _FakeEither_0<_i5.Failure, List<_i7.Edge>>(
          this,
          Invocation.method(
            #edges,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.Edge>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.Edge>>(
          this,
          Invocation.method(
            #edges,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.Edge>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Edge>> createEdge(
          {required _i7.Edge? edge}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createEdge,
          [],
          {#edge: edge},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Edge>>.value(
            _FakeEither_0<_i5.Failure, _i7.Edge>(
          this,
          Invocation.method(
            #createEdge,
            [],
            {#edge: edge},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i7.Edge>>.value(
                _FakeEither_0<_i5.Failure, _i7.Edge>(
          this,
          Invocation.method(
            #createEdge,
            [],
            {#edge: edge},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Edge>>);
  @override
  _i4.Future<
      _i2
          .Either<_i5.Failure, _i3.GraphComponentsRepository>> removeAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, _i3.GraphComponentsRepository>>.value(
            _FakeEither_0<_i5.Failure, _i3.GraphComponentsRepository>(
          this,
          Invocation.method(
            #removeAll,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2.Either<_i5.Failure, _i3.GraphComponentsRepository>>.value(
            _FakeEither_0<_i5.Failure, _i3.GraphComponentsRepository>(
          this,
          Invocation.method(
            #removeAll,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.GraphComponentsRepository>>);
}

/// A class which mocks [InteractionState].
///
/// See the documentation for Mockito's code generation for more information.
class MockInteractionState extends _i1.Mock implements _i8.InteractionState {
  @override
  set nodeToBeConnected(_i6.Node? _nodeToBeConnected) => super.noSuchMethod(
        Invocation.setter(
          #nodeToBeConnected,
          _nodeToBeConnected,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
