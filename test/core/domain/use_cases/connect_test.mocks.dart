// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_pan_and_zoom/test/core/domain/use_cases/connect_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i5;

import 'package:flutter_pan_and_zoom/core/domain/entities/graph.dart' as _i2;
import 'package:flutter_pan_and_zoom/core/domain/entities/node.dart' as _i3;
import 'package:flutter_pan_and_zoom/core/domain/values/edge.dart' as _i4;
import 'package:flutter_pan_and_zoom/core/interaction_state.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Graph].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraph extends _i1.Mock implements _i2.Graph {
  @override
  List<_i3.Node> get nodes => (super.noSuchMethod(
        Invocation.getter(#nodes),
        returnValue: <_i3.Node>[],
        returnValueForMissingStub: <_i3.Node>[],
      ) as List<_i3.Node>);
  @override
  set nodes(List<_i3.Node>? _nodes) => super.noSuchMethod(
        Invocation.setter(
          #nodes,
          _nodes,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i3.Node> get draggingNodes => (super.noSuchMethod(
        Invocation.getter(#draggingNodes),
        returnValue: <_i3.Node>[],
        returnValueForMissingStub: <_i3.Node>[],
      ) as List<_i3.Node>);
  @override
  set draggingNodes(List<_i3.Node>? _draggingNodes) => super.noSuchMethod(
        Invocation.setter(
          #draggingNodes,
          _draggingNodes,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i4.Edge> get edges => (super.noSuchMethod(
        Invocation.getter(#edges),
        returnValue: <_i4.Edge>[],
        returnValueForMissingStub: <_i4.Edge>[],
      ) as List<_i4.Edge>);
  @override
  set edges(List<_i4.Edge>? _edges) => super.noSuchMethod(
        Invocation.setter(
          #edges,
          _edges,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addNode(_i3.Node? node) => super.noSuchMethod(
        Invocation.method(
          #addNode,
          [node],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addEdge(_i4.Edge? edge) => super.noSuchMethod(
        Invocation.method(
          #addEdge,
          [edge],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeNode(_i3.Node? node) => super.noSuchMethod(
        Invocation.method(
          #removeNode,
          [node],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeEdge(_i4.Edge? edge) => super.noSuchMethod(
        Invocation.method(
          #removeEdge,
          [edge],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeAll() => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void drag(dynamic node) => super.noSuchMethod(
        Invocation.method(
          #drag,
          [node],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void leaveDraggingItemAtNewOffset(_i5.Offset? offset) => super.noSuchMethod(
        Invocation.method(
          #leaveDraggingItemAtNewOffset,
          [offset],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [InteractionState].
///
/// See the documentation for Mockito's code generation for more information.
class MockInteractionState extends _i1.Mock implements _i6.InteractionState {
  @override
  set nodeToBeConnected(_i3.Node? _nodeToBeConnected) => super.noSuchMethod(
        Invocation.setter(
          #nodeToBeConnected,
          _nodeToBeConnected,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
